<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSteamserver</title>
    <url>/2021/07/19/CSteamserver/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>CobaltStrike4.0服务器相关配置</p>

</blockquote>

<span id="more"></span>

<h2 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h2><p>服务器的运行需要配置java环境，具体可以参考本人博客园的配置</p>
<h2 id="上传CobaltStrike4-0文件夹"><a href="#上传CobaltStrike4-0文件夹" class="headerlink" title="上传CobaltStrike4.0文件夹"></a>上传CobaltStrike4.0文件夹</h2><p>利用Xftp上传文件夹，并赋予权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod +x teamserver</span><br></pre></td></tr></table></figure>

<p>运行teamserver</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./teamserver 服务器IP 登陆密码</span><br></pre></td></tr></table></figure>

<h2 id="使用screen令teamserver常驻"><a href="#使用screen令teamserver常驻" class="headerlink" title="使用screen令teamserver常驻"></a>使用screen令teamserver常驻</h2><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><p>运行cs.bat即可</p>
]]></content>
      <categories>
        <category>CobaltStrike</category>
        <category>4.0版本</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题设置Canvas Nest效果</title>
    <url>/2021/07/12/CanvasNest/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Nest主题设置动画效果</p>

</blockquote>

<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Step-1-rarr-进入Hexo文件夹"><a href="#Step-1-rarr-进入Hexo文件夹" class="headerlink" title="Step 1 &rarr; 进入Hexo文件夹"></a>Step 1 &rarr; 进入Hexo文件夹</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ ls</span><br><span class="line">scaffolds  <span class="built_in">source</span>  themes  _config.yml  package.json</span><br></pre></td></tr></table></figure>

<h3 id="Step-2-rarr-创建-footer-swig"><a href="#Step-2-rarr-创建-footer-swig" class="headerlink" title="Step 2 &rarr; 创建 footer.swig"></a>Step 2 &rarr; 创建 <code>footer.swig</code></h3><p>在 <code>hexo/source/_data</code> (_data不存在则创建)下创建<code>footer.swig</code></p>
<p>内容如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">color</span>=<span class="string">&quot;0,0,255&quot;</span> <span class="attr">opacity</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">zIndex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">count</span>=<span class="string">&quot;99&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Step-3-rarr-修改主题配置"><a href="#Step-3-rarr-修改主题配置" class="headerlink" title="Step 3 &rarr; 修改主题配置"></a>Step 3 &rarr; 修改主题配置</h3><p>修改Next主题配置 <code>_config.yml</code>，如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题下设置首页文章摘要</title>
    <url>/2021/07/12/Excerpt/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>设置摘要令主页更加美观</p>

</blockquote>

<span id="more"></span>

<h1 id="配置设置"><a href="#配置设置" class="headerlink" title="配置设置"></a>配置设置</h1><h2 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h2><p>在Next主题的配置文件_config.yml中开启摘要简述功能（默认打开）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Automatically excerpt description in homepage as preamble text.</span><br><span class="line">excerpt_description: true</span><br></pre></td></tr></table></figure>

<h2 id="为文章描写概述"><a href="#为文章描写概述" class="headerlink" title="为文章描写概述"></a>为文章描写概述</h2><p>在文章头部中添加<code>description:</code>，并在之后（注意添加空格）描写文章摘要保存即可，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 令Next主题首页显示文章摘要</span><br><span class="line">data:</span><br><span class="line">description: 修改主题配置，为文章描写概述，将概述描写添加到模版</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>效果如本文所示</p>
<h2 id="将概述描写添加到模版"><a href="#将概述描写添加到模版" class="headerlink" title="将概述描写添加到模版"></a>将概述描写添加到模版</h2><p>为了方便书写可以将<code>description:</code>添加到scaffolds/post.md中，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">description:</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>之后进行文章书写时，会自动添加<code>description:</code></p>
<h1 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h1><p>安装以下插件后</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install theme-next/hexo-next-tag</span><br></pre></td></tr></table></figure>

<p>文章开头输入</p>
<blockquote class="blockquote-center">
<p>摘要内容</p>

</blockquote>

<p>并用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>进行截断即可(记得开启摘要简述功能)</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>ComputerNetwork</title>
    <url>/2022/03/05/ComputerNetwork/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>计算机网络概述</p>

</blockquote>

<span id="more"></span>

<h1 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h1><p>互联网服务提供商 ISP 可以从互联网管理机构获得许多 IP 地址，同时拥有通信线路以及路由器等联网设备，个人或机构向 ISP 缴纳一定的费用就可以接入互联网。</p>
<img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/72be01cd-41ae-45f7-99b9-a8d284e44dd4.png" alt="ISP" style="zoom:67%;" />

<p>目前的互联网是一种多层次 ISP 结构，ISP 根据覆盖面积的大小分为第一层 ISP、区域 ISP 和接入 ISP。互联网交换点 IXP 允许两个 ISP 直接相连而不用经过第三个 ISP。</p>
<img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/3be42601-9d33-4d29-8358-a9d16453af93.png" style="zoom:67%;" />
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>概述</tag>
      </tags>
  </entry>
  <entry>
    <title>PythonList</title>
    <url>/2022/03/07/PythonList/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Python学习之List</p>

</blockquote>

<span id="more"></span>

<h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><p>所谓序列，指的是一块可存放多个值的连续内存空间，这些值按一定顺序排列，可通过每个值所在位置的编号（称为索引）访问它们。</p>
<p>为了更形象的认识序列，可以将它看做是一家旅店，那么店中的每个房间就如同序列存储数据的一个个内存空间，每个房间所特有的房间号就相当于索引值。也就是说，通过房间号（索引）我们可以找到这家旅店（序列）中的每个房间（内存空间）。</p>
<p>在 <a href="http://c.biancheng.net/python/">Python</a> 中，序列类型包括<code>字符串、列表、元组、集合</code>和<code>字典</code>，这些序列支持以下几种通用的操作，但比较特殊的是，集合和字典<u><strong>不支持索引、切片、相加和相乘</strong></u>操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"></span><br><span class="line">A[序列]--&gt;B[字符串]</span><br><span class="line">A[序列]--&gt;C[列表]</span><br><span class="line">A[序列]--&gt;D[元组]</span><br><span class="line">A[序列]--&gt;E[集合]</span><br></pre></td></tr></table></figure>

<h2 id="序列索引"><a href="#序列索引" class="headerlink" title="序列索引"></a>序列索引</h2><p>序列中，每个元素都有属于自己的编号（索引）。<strong>从起始元素开始，索引值从 0 开始递增</strong>，如图 1 所示。</p>
<p><img src="http://c.biancheng.net/uploads/allimg/190705/2-1ZF5104015S0.gif"></p>
<p>除此之外，Python 还支持索引值是负数，此类索引是从右向左计数，换句话说，从最后一个元素开始计数，从索引值 -1 开始，如图 2 所示。</p>
<p><img src="http://c.biancheng.net/uploads/allimg/200506/2-2005061011292T.gif"></p>
<p>无论是采用正索引值，还是负索引值，都可以访问序列中的任何元素。如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;gxuwxx&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>]+<span class="string">&quot;==&quot;</span>+<span class="built_in">str</span>[-<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>]+<span class="string">&quot;==&quot;</span>+<span class="built_in">str</span>[-<span class="number">5</span>])</span><br></pre></td></tr></table></figure>

<h2 id="序列切片"><a href="#序列切片" class="headerlink" title="序列切片"></a>序列切片</h2><p>切片操作是访问序列中元素的另一种方法，它可以访问一定范围内的元素，通过切片操作，可以生成一个新的序列。</p>
<p>序列实现切片操作的语法格式如下：</p>
<p><code>sname[start : end : step]</code></p>
<p>其中，各个参数的含义分别是：</p>
<ul>
<li><code>sname</code>：表示序列的名称；</li>
<li><code>start</code>：表示切片的开始索引位置（包括该位置），此参数也可以不指定，会默认为 0，也就是从序列的开头进行切片；</li>
<li><code>end</code>：表示切片的结束索引位置（不包括该位置），如果不指定，则默认为序列的长度；</li>
<li><code>step</code>：表示在切片过程中，隔几个存储位置（包含当前位置）取一次元素，也就是说，如果 step 的值大于 1，则在进行切片去序列元素时，会“跳跃式”的取元素。如果省略设置 step 的值，则最后一个冒号就可以省略。</li>
</ul>
<p>如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;一二三四五六&quot;</span></span><br><span class="line"><span class="comment">#取索引区间为[0,2]之间（不包括索引2处的字符）的字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#隔 1 个字符取一个字符，区间是整个字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[::<span class="number">2</span>])</span><br><span class="line"><span class="comment">#取整个字符串，此时 [] 中只需一个冒号即可</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:])</span><br><span class="line"><span class="comment">#取整个字符串，此时 [] 中只需一个冒号即可</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[::<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">一二</span><br><span class="line">一三五</span><br><span class="line">一二三四五六</span><br><span class="line">一四</span><br></pre></td></tr></table></figure>

<h2 id="序列相加"><a href="#序列相加" class="headerlink" title="序列相加"></a>序列相加</h2><p>Python 中，支持两种类型相同的序列使用“+”运算符做相加操作，它会将两个序列进行连接，<strong>但不会去除重复的元素。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;一二三四五六&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;零&quot;</span>+<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">零一二三四五六</span><br></pre></td></tr></table></figure>

<h2 id="序列相乘"><a href="#序列相乘" class="headerlink" title="序列相乘"></a>序列相乘</h2><p>Python 中，使用数字 n 乘以一个序列会生成新的序列，其内容为原来序列被重复 n 次的结果。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;一二三&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>*<span class="number">3</span>)</span><br><span class="line">一二三一二三一二三</span><br></pre></td></tr></table></figure>

<p>比较特殊的是，列表类型在进行乘法运算时，还可以实现初始化指定长度列表的功能。例如如下的代码，将创建一个长度为 5 的列表，列表中的每个元素都是 None，表示什么都没有。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="literal">None</span>]*<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">[<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br></pre></td></tr></table></figure>

<h2 id="检查元素是否包含在序列中"><a href="#检查元素是否包含在序列中" class="headerlink" title="检查元素是否包含在序列中"></a>检查元素是否包含在序列中</h2><p>Python 中，可以使用 in 关键字检查某元素是否为序列的成员，其语法格式为：</p>
<p><code>value in sequence</code></p>
<p>其中，value 表示要检查的元素，sequence 表示指定的序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;一二三四五六&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>和 in 关键字用法相同，但功能恰好相反的，还有 not in 关键字，它用来检查某个元素是否不包含在指定的序列中，比如说：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;一二三四五六&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="和序列相关的内置函数"><a href="#和序列相关的内置函数" class="headerlink" title="和序列相关的内置函数"></a>和序列相关的内置函数</h2><p>Python提供了几个内置函数（表 3 所示），可用于实现与序列相关的一些常用操作。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>len()</code></td>
<td>计算序列的长度，即返回序列中包含多少个元素。</td>
</tr>
<tr>
<td>max()</td>
<td>找出序列中的最大元素。注意，对序列使用 sum() 函数时，做加和操作的必须都是数字，不能是字符或字符串，否则该函数将抛出异常，因为解释器无法判定是要做连接操作（+ 运算符可以连接两个序列），还是做加和操作。</td>
</tr>
<tr>
<td>min()</td>
<td>找出序列中的最小元素。</td>
</tr>
<tr>
<td>list()</td>
<td>将序列转换为列表。</td>
</tr>
<tr>
<td>str()</td>
<td>将序列转换为字符串。</td>
</tr>
<tr>
<td>sum()</td>
<td>计算元素和。</td>
</tr>
<tr>
<td>sorted()</td>
<td>对元素进行排序。</td>
</tr>
<tr>
<td>reversed()</td>
<td>反向序列中的元素。</td>
</tr>
<tr>
<td>enumerate()</td>
<td>将序列组合为一个索引序列，多用在 for 循环中。</td>
</tr>
</tbody></table>
<h1 id="Python-list"><a href="#Python-list" class="headerlink" title="Python list"></a>Python list</h1><p><a href="http://c.biancheng.net/python/">Python</a> 中没有数组，但是加入了更加强大的列表。如果把数组看做是一个集装箱，那么 Python 的列表就是一个工厂的仓库。</p>
<p>从形式上看，列表会将所有元素都放在一对中括号<code>[ ]</code>里面，相邻元素之间用逗号<code>,</code>分隔，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[element1, element2, element3, ..., elementn]</span><br></pre></td></tr></table></figure>

<p>格式中，<code>element1 ~ elementn </code>表示列表中的元素，个数没有限制，只要是 Python 支持的数据类型就可以。</p>
<p>从内容上看，列表可以存储整数、小数、字符串、列表、元组等任何类型的数据，并且同一个列表中元素的类型也可以不同。</p>
<p>比如说：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;abcdefg&quot;</span>, <span class="number">1</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] , <span class="number">3.0</span>]</span><br></pre></td></tr></table></figure>

<p>可以看到，列表中同时包含字符串、整数、列表、浮点数这些数据类型。</p>
<p>注意，在使用列表时，虽然可以将不同类型的数据放入到同一个列表中，但通常情况下不这么做，同一列表中只放入同一类型的数据，这样可以提高程序的可读性。</p>
<h2 id="Python创建列表"><a href="#Python创建列表" class="headerlink" title="Python创建列表"></a>Python创建列表</h2><p>在 Python 中，创建列表的方法可分为两种，下面分别进行介绍。</p>
<h4 id="1-使用-直接创建列表"><a href="#1-使用-直接创建列表" class="headerlink" title="1) 使用 [ ] 直接创建列表"></a>1) 使用 [ ] 直接创建列表</h4><p>使用<code>[ ]</code>创建列表后，一般使用<code>=</code>将它赋值给某个变量，具体格式如下：</p>
<p><code>listname = [element1 , element2 , element3 , ... , elementn]</code></p>
<p>其中，<code>listname</code> 表示变量名，<code>element1 ~ elementn</code> 表示列表元素。</p>
<p>例如，下面定义的列表都是合法的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">name = [<span class="string">&quot;wxx&quot;</span>, <span class="string">&quot;http://c.biancheng.net&quot;</span>]</span><br><span class="line">program = [<span class="string">&quot;C语言&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;Java&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>另外，使用此方式创建列表时，列表中元素可以有多个，也可以一个都没有，例如：</p>
<p><code>emptylist = [ ]</code></p>
<p>这表明，<code>emptylist</code> 是一个空列表。</p>
<h4 id="2-使用-list-函数创建列表"><a href="#2-使用-list-函数创建列表" class="headerlink" title="2) 使用 list() 函数创建列表"></a>2) 使用 list() 函数创建列表</h4><p>除了使用<code>[ ]</code>创建列表外，Python 还提供了一个内置的函数 list()，使用它可以将其它数据类型转换为列表类型。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将字符串转换成列表</span></span><br><span class="line">list1 = <span class="built_in">list</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment">#将元组转换成列表</span></span><br><span class="line">tuple1 = (<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>)</span><br><span class="line">list2 = <span class="built_in">list</span>(tuple1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="comment">#将字典转换成列表</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">100</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">42</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">9</span>&#125;</span><br><span class="line">list3 = <span class="built_in">list</span>(dict1)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"><span class="comment">#将区间转换成列表</span></span><br><span class="line">range1 = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">list4 = <span class="built_in">list</span>(range1)</span><br><span class="line"><span class="built_in">print</span>(list4)</span><br><span class="line"><span class="comment">#创建空列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>())</span><br></pre></td></tr></table></figure>

<h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><p>列表是 Python 序列的一种，我们可以使用索引（Index）访问列表中的某个元素（得到的是一个元素的值），也可以使用切片访问列表中的一组元素（得到的是一个新的子列表）。</p>
<p>使用索引访问列表元素的格式为：</p>
<p><code>listname[i]</code></p>
<p>其中，<code>listname </code>表示列表名字，i 表示索引值。列表的索引可以是正数，也可以是负数。</p>
<p>使用切片访问列表元素的格式为：</p>
<p><code>listname[start : end : step]</code></p>
<p>其中，<code>listname</code> 表示列表名字，start 表示起始索引，end 表示结束索引，step 表示步长。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="built_in">list</span>(<span class="string">&quot;wwww.gxuctf.com&quot;</span>)</span><br><span class="line"><span class="comment">#使用索引访问列表中的某个元素</span></span><br><span class="line"><span class="built_in">print</span>(url[<span class="number">3</span>])  <span class="comment">#使用正数索引</span></span><br><span class="line"><span class="built_in">print</span>(url[-<span class="number">4</span>])  <span class="comment">#使用负数索引</span></span><br><span class="line"><span class="comment">#使用切片访问列表中的一组元素</span></span><br><span class="line"><span class="built_in">print</span>(url[<span class="number">9</span>: <span class="number">18</span>])  <span class="comment">#使用正数切片</span></span><br><span class="line"><span class="built_in">print</span>(url[<span class="number">9</span>: <span class="number">18</span>: <span class="number">3</span>])  <span class="comment">#指定步长</span></span><br><span class="line"><span class="built_in">print</span>(url[-<span class="number">6</span>: -<span class="number">1</span>])  <span class="comment">#使用负数切片</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w</span><br><span class="line">.</span><br><span class="line">[<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;m&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Python删除列表"><a href="#Python删除列表" class="headerlink" title="Python删除列表"></a>Python删除列表</h2><p>对于已经创建的列表，如果不再使用，可以使用<code>del</code>关键字将其删除。</p>
<p>实际开发中并不经常使用 del 来删除列表，因为 Python 自带的垃圾回收机制会自动销毁无用的列表，即使开发者不手动删除，Python 也会自动将其回收。</p>
<p>del 关键字的语法格式为：</p>
<p><code>del listname</code></p>
<p>Python 删除列表实例演示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">intlist = [<span class="number">1</span>, <span class="number">45</span>, <span class="number">8</span>, <span class="number">34</span>]</span><br><span class="line"><span class="built_in">print</span>(intlist)</span><br><span class="line"><span class="keyword">del</span> intlist</span><br><span class="line"><span class="built_in">print</span>(intlist)</span><br><span class="line"></span><br><span class="line">NameError    Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">2</span>-6a903c39378f&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      <span class="number">2</span> <span class="built_in">print</span>(intlist)</span><br><span class="line">      <span class="number">3</span> <span class="keyword">del</span> intlist</span><br><span class="line">----&gt; <span class="number">4</span> <span class="built_in">print</span>(intlist)</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">&#x27;intlist&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>

<h2 id="Python-list列表添加元素的3种方法"><a href="#Python-list列表添加元素的3种方法" class="headerlink" title="Python list列表添加元素的3种方法"></a>Python list列表添加元素的3种方法</h2><h3 id=""><a href="#" class="headerlink" title="+"></a><code>+</code></h3><p>使用<code>+</code>运算符可以将多个序列连接起来；列表是序列的一种，所以也可以使用<code>+</code>进行连接，这样就相当于在第一个列表的末尾添加了另一个列表。</p>
<h3 id="append-方法添加元素"><a href="#append-方法添加元素" class="headerlink" title="append()方法添加元素"></a>append()方法添加元素</h3><p>append() 方法用于在列表的末尾追加元素，该方法的语法格式如下：</p>
<p><code>listname.append(obj)</code></p>
<p>其中，<code>listname</code> 表示要添加元素的列表；<code>obj </code>表示到添加到列表末尾的数据，它可以是单个元素，也可以是列表、元组等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表追加元素</span></span><br><span class="line">newlist = [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;PHP&quot;</span>]</span><br><span class="line">newlist.append(<span class="string">&quot;JAVA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表追加元组元素</span></span><br><span class="line">newtuple = (<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>)</span><br><span class="line">newlist.append(newtuple)</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br><span class="line"><span class="comment"># 列表追加列表</span></span><br><span class="line">newlist.append([<span class="string">&quot;C&quot;</span>, <span class="string">&quot;C++&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>, <span class="string">&#x27;JAVA&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>, <span class="string">&#x27;JAVA&#x27;</span>, (<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>)]</span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>, <span class="string">&#x27;JAVA&#x27;</span>, (<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>), [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>]]</span><br></pre></td></tr></table></figure>

<p>可以看到，当给 append() 方法传递列表或者元组时，此方法会将它们视为一个整体，作为一个元素添加到列表中，从而形成包含列表和元组的新列表。</p>
<h3 id="extend-方法添加元素"><a href="#extend-方法添加元素" class="headerlink" title="extend()方法添加元素"></a><code>extend()方法添加元素</code></h3><p>extend() 和 append() 的不同之处在于：**<u>extend() 不会把列表或者元祖视为一个整体，而是把它们包含的元素逐个添加到列表中</u>**。</p>
<p>extend() 方法的语法格式如下：</p>
<p><code>listname.extend(obj)</code></p>
<p>其中，<code>listname</code> 指的是要添加元素的列表；<code>obj </code>表示到添加到列表末尾的数据，它可以是单个元素，也可以是列表、元组等，但不能是单个的数字。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##extend</span></span><br><span class="line"><span class="comment">## 列表追加元素</span></span><br><span class="line">newlist = [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;PHP&quot;</span>]</span><br><span class="line">newlist.extend(<span class="string">&quot;JAVA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 列表追加元组元素</span></span><br><span class="line">newtuple = (<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>)</span><br><span class="line">newlist.extend(newtuple)</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br><span class="line"><span class="comment">## 列表追加列表</span></span><br><span class="line">newlist.extend([<span class="string">&quot;C&quot;</span>, <span class="string">&quot;C++&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="insert-方法插入元素"><a href="#insert-方法插入元素" class="headerlink" title="insert()方法插入元素"></a><strong>insert()方法插入元素</strong></h3><p><u>append() 和 extend() 方法只能在列表末尾插入元素，<strong>如果希望在列表中间某个位置插入元素，那么可以使用 insert() 方法。</strong></u></p>
<p>insert() 的语法格式如下：</p>
<p><code>listname.insert(index , obj)</code></p>
<p>其中，index 表示指定位置的<strong>索引值</strong>。insert() 会将 <code>obj</code> 插入到 <code>listname</code> 列表第 index 个元素的位置。</p>
<p>当插入列表或者元祖时，insert() 也会将它们视为一个整体，作为一个元素插入到列表中，<strong>这一点和 append() 是一样的</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>]</span><br><span class="line"><span class="comment">#插入元素</span></span><br><span class="line">l.insert(<span class="number">1</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">#插入元组，整个元祖被当成一个元素</span></span><br><span class="line">t = (<span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>)</span><br><span class="line">l.insert(<span class="number">2</span>, t)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">#插入列表，整个列表被当成一个元素</span></span><br><span class="line">l.insert(<span class="number">3</span>, [<span class="string">&#x27;Ruby&#x27;</span>, <span class="string">&#x27;SQL&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">#插入字符串，整个字符串被当成一个元素</span></span><br><span class="line">l.insert(<span class="number">0</span>, <span class="string">&quot;PHP&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, (<span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>), <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, (<span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>), [<span class="string">&#x27;Ruby&#x27;</span>, <span class="string">&#x27;SQL&#x27;</span>], <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;PHP&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, (<span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>), [<span class="string">&#x27;Ruby&#x27;</span>, <span class="string">&#x27;SQL&#x27;</span>], <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="list列表删除元素（4种方法）"><a href="#list列表删除元素（4种方法）" class="headerlink" title="list列表删除元素（4种方法）"></a>list列表删除元素（4种方法）</h2><ul>
<li><strong>根据目标元素所在位置的索引进行删除，可以使用 del 关键字或者 pop() 方法；</strong></li>
<li><strong>根据元素本身的值进行删除，可使用列表（list类型）提供的 remove() 方法；</strong></li>
<li><strong>将列表中所有元素全部删除，可使用列表（list类型）提供的 clear() 方法。</strong></li>
</ul>
<h3 id="del：根据索引值删除元素"><a href="#del：根据索引值删除元素" class="headerlink" title="del：根据索引值删除元素"></a>del：根据索引值删除元素</h3><p>del 是 Python 中的关键字，专门用来执行删除操作，它不仅可以删除整个列表，还可以删除列表中的某些元素。</p>
<p>del 可以删除列表中的单个元素，格式为：</p>
<p><code>del listname[index]</code></p>
<p>其中，<code>listname</code> 表示列表名称，index 表示元素的索引值。</p>
<p>del 也可以删除中间一段连续的元素，格式为：</p>
<p><code>del listname[start : end]</code></p>
<p>其中，start 表示起始索引，end 表示结束索引。del 会删除从索引 start 到 end 之间的元素，不包括 end 位置的元素。</p>
<h3 id="pop-：根据索引值删除元素"><a href="#pop-：根据索引值删除元素" class="headerlink" title="pop()：根据索引值删除元素"></a>pop()：根据索引值删除元素</h3><p>Python pop() 方法用来删除列表中指定索引处的元素，具体格式如下：</p>
<p><code>listname.pop(index)</code></p>
<p>其中，<code>listname</code> 表示列表名称，index 表示索引值。如果不写 index 参数，默认会删除列表中的最后一个元素，类似于<a href="http://c.biancheng.net/data_structure/">数据结构</a>中的“出栈”操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line">nums.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line">nums.pop()</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<p><strong><u>大部分编程语言都会提供和 pop() 相对应的方法，就是 push()，该方法用来将元素添加到列表的尾部，类似于数据结构中的“入栈”操作。但是 Python 是个例外，Python 并没有提供 push() 方法，因为完全可以使用 append() 来代替 push() 的功能。</u></strong></p>
<h3 id="remove-：根据元素值进行删除"><a href="#remove-：根据元素值进行删除" class="headerlink" title="remove()：根据元素值进行删除"></a>remove()：根据元素值进行删除</h3><p>除了 del 关键字，Python 还提供了 remove() 方法，<strong>该方法会根据元素本身的值来进行删除操作。</strong></p>
<p>需要注意的是，remove() 方法只会删除第一个和指定值相同的元素，而且必须保证该元素是存在的，否则会引发 <code>ValueError</code> 错误。</p>
<p>remove() 方法使用示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment">#第一次删除36</span></span><br><span class="line">nums.remove(<span class="number">36</span>)</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"><span class="comment">#第二次删除36</span></span><br><span class="line">nums.remove(<span class="number">36</span>)</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"><span class="comment">#删除78</span></span><br><span class="line">nums.remove(<span class="number">78</span>)</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">1</span>-220de362013c&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      <span class="number">7</span> <span class="built_in">print</span>(nums)</span><br><span class="line">      <span class="number">8</span> <span class="comment">#删除78</span></span><br><span class="line">----&gt; <span class="number">9</span> nums.remove(<span class="number">78</span>)</span><br><span class="line">     <span class="number">10</span> <span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line">ValueError: <span class="built_in">list</span>.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<h3 id="clear-：删除列表所有元素"><a href="#clear-：删除列表所有元素" class="headerlink" title="clear()：删除列表所有元素"></a>clear()：删除列表所有元素</h3><p>Python clear() 用来删除列表的所有元素，也即清空列表，请看下面的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="built_in">list</span>(<span class="string">&quot;http://c.biancheng.net/python/&quot;</span>)</span><br><span class="line">url.clear()</span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<h2 id="list列表修改元素"><a href="#list列表修改元素" class="headerlink" title="list列表修改元素"></a>list列表修改元素</h2><h3 id="修改单个元素"><a href="#修改单个元素" class="headerlink" title="修改单个元素"></a>修改单个元素</h3><p>修改单个元素非常简单，直接对元素赋值即可。请看下面的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line">nums[<span class="number">2</span>] = -<span class="number">26</span>  <span class="comment">#使用正数索引</span></span><br><span class="line">nums[-<span class="number">3</span>] = -<span class="number">66.2</span>  <span class="comment">#使用负数索引</span></span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line">[<span class="number">40</span>, <span class="number">36</span>, -<span class="number">26</span>, <span class="number">2</span>, -<span class="number">66.2</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">使用索引得到列表元素后，通过=赋值就改变了元素的值。</span><br></pre></td></tr></table></figure>

<h3 id="修改一组元素"><a href="#修改一组元素" class="headerlink" title="修改一组元素"></a>修改一组元素</h3><p>Python 支持通过切片语法给一组元素赋值。在进行这种操作时，如果不指定步长（step 参数），Python 就不要求新赋值的元素个数与原来的元素个数相同；这意味，该操作既可以为列表添加元素，也可以为列表删除元素。</p>
<p>如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">numbers[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>

<p>如果对空切片（slice）赋值，就相当于插入一组新的元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers[<span class="number">3</span>:<span class="number">3</span>] = [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>

<p>使用切片语法赋值时，Python 不支持单个值，例如下面的写法就是错误的：</p>
<p><code>nums[4: 4] = -77</code></p>
<p>但是如果使用字符串赋值，Python 会自动把字符串转换成序列，其中的每个字符都是一个元素，请看下面的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">list</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">s[<span class="number">2</span>:<span class="number">4</span>] = <span class="string">&quot;XYZ&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>使用切片语法时也可以指定步长（step 参数），但这个时候就要求所赋值的新元素的个数与原有元素的个数相同，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment">#步长为2，为第1、3、5个元素赋值</span></span><br><span class="line">nums[<span class="number">1</span>: <span class="number">6</span>: <span class="number">2</span>] = [<span class="number">0.025</span>, -<span class="number">99</span>, <span class="number">20.5</span>]</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line">[<span class="number">40</span>, <span class="number">0.025</span>, <span class="number">89</span>, -<span class="number">99</span>, <span class="number">36</span>, <span class="number">20.5</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>

<h2 id="list列表查找元素"><a href="#list列表查找元素" class="headerlink" title="list列表查找元素"></a>list列表查找元素</h2><h3 id="index-方法"><a href="#index-方法" class="headerlink" title="index() 方法"></a>index() 方法</h3><p>index() 方法用来查找某个元素在列表中出现的位置（也就是索引），如果该元素不存在，则会导致 <code>ValueError</code> 错误，所以在查找之前最好使用 count() 方法判断一下。</p>
<p>index() 的语法格式为：</p>
<p><code>listname.index(obj, start, end)</code></p>
<p>其中，<code>listname</code> 表示列表名称，<code>obj </code>表示要查找的元素，start 表示起始位置，end 表示结束位置。</p>
<p>start 和 end 参数用来指定检索范围：</p>
<ul>
<li>start 和 end 可以都不写，此时会检索整个列表；</li>
<li>如果只写 start 不写 end，那么表示检索从 start 到末尾的元素；</li>
<li>如果 start 和 end 都写，那么表示检索 start 和 end 之间的元素。</li>
</ul>
<p>index() 方法会返回元素所在列表中的索引值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>, -<span class="number">20.5</span>, -<span class="number">999</span>]</span><br><span class="line"><span class="comment">#检索列表中的所有元素</span></span><br><span class="line"><span class="built_in">print</span>( nums.index(<span class="number">2</span>) )</span><br><span class="line"><span class="comment">#检索3~7之间的元素</span></span><br><span class="line"><span class="built_in">print</span>( nums.index(<span class="number">100</span>, <span class="number">3</span>, <span class="number">7</span>) )</span><br><span class="line"><span class="comment">#检索4之后的元素</span></span><br><span class="line"><span class="built_in">print</span>( nums.index(<span class="number">7</span>, <span class="number">4</span>) )</span><br><span class="line"><span class="comment">#检索一个不存在的元素</span></span><br><span class="line"><span class="built_in">print</span>( nums.index(<span class="number">55</span>) )</span><br></pre></td></tr></table></figure>

<h3 id="count-方法"><a href="#count-方法" class="headerlink" title="count()方法"></a>count()方法</h3><p>count() 方法用来统计某个元素在列表中出现的次数，基本语法格式为：</p>
<p><code>listname.count(obj)</code></p>
<p>其中，<code>listname</code> 代表列表名，<code>obj</code> 表示要统计的元素。</p>
<p>如果 count() 返回 0，就表示列表中不存在该元素，所以 count() 也可以用来判断列表中的某个元素是否存在。</p>
<p>count() 用法示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>, -<span class="number">20.5</span>, <span class="number">36</span>]</span><br><span class="line"><span class="comment">#统计元素出现的次数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;36出现了%d次&quot;</span> % nums.count(<span class="number">36</span>))</span><br><span class="line"><span class="comment">#判断一个元素是否存在</span></span><br><span class="line"><span class="keyword">if</span> nums.count(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;列表中存在100这个元素&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;列表中不存在100这个元素&quot;</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p><a href="http://c.biancheng.net/python/list_tuple_dict/">来源C语言中文网</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题下添加文章版权信息</title>
    <url>/2021/07/12/Setcopyright/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>修改主题配置添加版权信息</p>

</blockquote>

<span id="more"></span>

<p>新版Next主题文章末添加版权信息，看了网上许多教程，大部分都是修改<code>post_copyright</code>，但本人用的主题配置文件下，并无该配置项目，故自己摸索出来了配置方法</p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改主题配置文件<code>_config.yml</code>，如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span> <span class="comment">#false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span> <span class="comment">#false</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure>

<p> 效果如本文所示</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>wxx</title>
    <url>/2022/03/05/wxx/</url>
    <content><![CDATA[<blockquote class="blockquote-center">

</blockquote>

<span id="more"></span>
]]></content>
  </entry>
</search>
